services:

  app:
    build:
      context: .
      dockerfile: docker/production.Dockerfile
    image: property_finder:latest
    container_name: property_finder
    entrypoint: [ "/bin/bash", "-c" ]
    expose:
      - 8000
    command:
      - |
        sh "docker/web_entrypoint.sh"
    depends_on:
      - db
      - pgbouncer
    restart: always
    env_file:
      - ./config/env_conf/.env
  db:
    image: postgres:latest
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=property_finder
      - POSTGRES_USER=skyloov
      - POSTGRES_PASSWORD=skyloov1234
    volumes:
      - postgres-data:/var/lib/postgresql/data


  pgbouncer: #
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer
    ports:
      - "6432:6432"
    volumes:
      - ./pgbouncer/:/etc/pgbouncer/
    depends_on:
      - db
    environment:
      POOL_MODE: transaction  # Sets the pool mode to `transaction`. In this mode, a database connection is allocated for the duration of a single transaction and returned to the pool afterward.
      MAX_DB_CONNECTIONS: 100  # Specifies the maximum number of database connections that PgBouncer can manage simultaneously.
      DEFAULT_POOL_SIZE: 40  # Sets the default number of connections allowed in each pool.


  elasticsearch:
    restart: always
    image: elasticsearch:8.17.0
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - TimeOutStartSec=600
    volumes:
      - es-data:/usr/share/elasticsearch/data

  redis:
    restart: always
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  celery:
    image: property_finder:latest
    container_name: worker
    command: celery -A src.property_finder.tasks worker -l info
    environment:
      - DATABASE_URL=psql://skyloov:skyloov1234@db:5432/property_finder
      - CELERY_BROKER_URL=redis://redis:6379/0
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
    restart: on-failure

  kafka:
    image: apache/kafka-native
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      - kafka
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_NAME: property_finder
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9093"

  nginx:
    build: ./nginx
    volumes:
      - static-data:/staticfiles
    ports:
      - "80:80"
    depends_on:
      - app
    restart: always

volumes:
  es-data:
  postgres-data:
  redis-data:
  kafka-ui-data:
  pgbouncer-data:
  static-data: